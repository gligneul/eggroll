// Code generated by EggRoll - DO NOT EDIT.

package main

import (
	"fmt"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/gligneul/eggroll/pkg/eggtypes"
)

var (
	_ = big.NewInt
	_ = common.Big1
	_ = eggtypes.MustAddSchema
)

//
// Types
//

// Schema with selector d0e30db0
type Deposit struct {
}

// Schema with selector 2e1a7d4d
type Withdraw struct {
	Value *big.Int
}

// Schema with selector a7353783
type Honeypot struct {
	Balance *big.Int
}

//
// IDs
//

// deposit ID
var DepositID = [4]byte{0xd0, 0xe3, 0xd, 0xb0}

// withdraw ID
var WithdrawID = [4]byte{0x2e, 0x1a, 0x7d, 0x4d}

// honeypot ID
var HoneypotID = [4]byte{0xa7, 0x35, 0x37, 0x83}

//
// Encode
//

// Encode deposit into binary data.
func EncodeDeposit() []byte {
	values := make([]any, 0)
	data, err := _abi.Methods["deposit"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode deposit: %v", err))
	}
	return append(DepositID[:], data...)
}

// Encode deposit into binary data.
func (v Deposit) Encode() []byte {
	return EncodeDeposit()
}

// Encode withdraw into binary data.
func EncodeWithdraw(
	Value *big.Int,
) []byte {
	values := make([]any, 1)
	values[0] = Value
	data, err := _abi.Methods["withdraw"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode withdraw: %v", err))
	}
	return append(WithdrawID[:], data...)
}

// Encode withdraw into binary data.
func (v Withdraw) Encode() []byte {
	return EncodeWithdraw(
		v.Value,
	)
}

// Encode honeypot into binary data.
func EncodeHoneypot(
	Balance *big.Int,
) []byte {
	values := make([]any, 1)
	values[0] = Balance
	data, err := _abi.Methods["honeypot"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode honeypot: %v", err))
	}
	return append(HoneypotID[:], data...)
}

// Encode honeypot into binary data.
func (v Honeypot) Encode() []byte {
	return EncodeHoneypot(
		v.Balance,
	)
}

//
// Decode
//

func _decode_Deposit(values []any) (any, error) {
	if len(values) != 0 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var v Deposit
	return v, nil
}

func _decode_Withdraw(values []any) (any, error) {
	if len(values) != 1 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var ok bool
	var v Withdraw
	v.Value, ok = values[0].(*big.Int)
	if !ok {
		return nil, fmt.Errorf("failed to decode withdraw.value")
	}
	return v, nil
}

func _decode_Honeypot(values []any) (any, error) {
	if len(values) != 1 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var ok bool
	var v Honeypot
	v.Balance, ok = values[0].(*big.Int)
	if !ok {
		return nil, fmt.Errorf("failed to decode honeypot.balance")
	}
	return v, nil
}

//
// Init
//

const _JSON_ABI = `[
  {
    "name": "deposit",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": null,
    "outputs": null
  },
  {
    "name": "withdraw",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256",
        "components": null
      }
    ],
    "outputs": null
  },
  {
    "name": "honeypot",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256",
        "components": null
      }
    ],
    "outputs": null
  }
]
`

var _abi abi.ABI

func init() {
	var err error
	_abi, err = abi.JSON(strings.NewReader(_JSON_ABI))
	if err != nil {
		// This should not happen
		panic(fmt.Sprintf("failed to decode ABI: %v", err))
	}
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        DepositID,
		Kind:      "deposit",
		Arguments: _abi.Methods["deposit"].Inputs,
		Decoder:   _decode_Deposit,
	})
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        WithdrawID,
		Kind:      "withdraw",
		Arguments: _abi.Methods["withdraw"].Inputs,
		Decoder:   _decode_Withdraw,
	})
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        HoneypotID,
		Kind:      "honeypot",
		Arguments: _abi.Methods["honeypot"].Inputs,
		Decoder:   _decode_Honeypot,
	})
}
