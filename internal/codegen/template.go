// Copyright (c) Gabriel de Quadros Ligneul
// SPDX-License-Identifier: MIT (see LICENSE)

package codegen

type tmplData struct {
	Package  string
	JsonAbi  string
	Structs  map[string]tmplStruct
	Messages []tmplMessage
}

type tmplStruct struct {
	ID     string
	Name   string
	Fields []tmplField
}

type tmplMessage struct {
	ID      []byte
	RawName string
	Name    string
	Fields  []tmplField
}

type tmplField struct {
	Name string
	Type string
}

const tmplSource = `// Code generated by EggRoll - DO NOT EDIT.

package {{.Package}}

import (
	"fmt"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/gligneul/eggroll/pkg/eggtypes"
)

var (
	_ = big.NewInt
	_ = common.Big1
	_ = eggtypes.PackValues
)

//
// Types
//

{{range $struct := .Structs}}
	type {{$struct.Name}} struct {
	{{range $field := .Fields}}
		{{$field.Name}} {{$field.Type}}{{end}}
	}
{{end}}

{{range $message := .Messages}}
	// Message with selector {{printf "%x" $message.ID}}
	type {{$message.Name}} struct {
	{{range $field := .Fields}}
		{{$field.Name}} {{$field.Type}}
	{{end}}
	}
{{end}}

//
// IDs
//

{{range $message := .Messages}}
	// {{$message.Name}} ID ({{printf "%x" $message.ID}})
	var {{$message.Name}}ID = [4]byte{ {{range $i := $message.ID}}{{$i}}, {{end}} }
{{end}}

//
// Pack
//

{{range $message := .Messages}}
	// Pack message {{$message.Name}} into an ABI payload.
	func (v {{$message.Name}}) Pack() []byte {
		payload, err := eggtypes.PackValues({{$message.Name}}ID,
		{{- range $field := .Fields}}
			v.{{$field.Name}},
		{{- end}}
		)
		if err != nil {
			panic(fmt.Sprintf("failed to pack {{$message.Name}}: %v", err))
		}
		return payload
	}
{{end}}

//
// Unpack
//

{{range $message := .Messages}}
	func _unpack_{{$message.Name}}(values []any) (any, error) {
		if len(values) != {{len $message.Fields}} {
			return nil, fmt.Errorf("wrong number of values")
		}
		{{- if $message.Fields}}
			var ok bool
		{{- end}}
		var v {{$message.Name}}
		{{- range $i, $field := .Fields}}
			v.{{$field.Name}}, ok = values[{{$i}}].({{$field.Type}})
			if !ok {
				return nil, fmt.Errorf("failed to unpack {{$message.Name}}.{{$field.Name}}")
			}
		{{- end}}
		return v, nil
	}
{{end}}

//
// Init
//

func init() {
	{{- /* This might be unsafe but it is easier to debug.
	       An alternative is to use 'printf "%q" .JsonAbi'. */ -}}
	const jsonAbi = ` + "`" + `{{.JsonAbi}}
	` + "`" + `
	abiInterface, err := abi.JSON(strings.NewReader(jsonAbi))
	if err != nil {
		panic(fmt.Sprintf("failed to decode ABI: %v", err))
	}
	{{- range $message := .Messages}}
		eggtypes.AddEncoding(eggtypes.Encoding{
			ID:        {{$message.Name}}ID,
			Name:      "{{$message.RawName}}",
			Arguments: abiInterface.Methods["{{$message.RawName}}"].Inputs,
			Unpacker:  _unpack_{{$message.Name}},
		})
	{{- end}}
}
`
