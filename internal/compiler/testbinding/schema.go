// Code generated by EggRoll - DO NOT EDIT.

package testbinding

import (
	"fmt"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/gligneul/eggroll/pkg/eggroll"
	"github.com/gligneul/eggroll/pkg/eggtypes"
)

var (
	_ = big.NewInt
	_ = common.Big1
	_ = eggtypes.MustAddSchema
)

// Messages encoded as JSON ABI.
const _JSON_ABI = `[
  {
    "name": "reportMessage",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": null,
    "outputs": null
  },
  {
    "name": "emptyAdvance",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": null,
    "outputs": null
  },
  {
    "name": "simpleAdvance",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": [
      {
        "name": "value",
        "type": "int64",
        "internalType": "int64",
        "components": null
      }
    ],
    "outputs": null
  },
  {
    "name": "multiFieldAdvance",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": [
      {
        "name": "intValue",
        "type": "int64",
        "internalType": "int64",
        "components": null
      },
      {
        "name": "boolValue",
        "type": "bool",
        "internalType": "bool",
        "components": null
      },
      {
        "name": "stringValue",
        "type": "string",
        "internalType": "string",
        "components": null
      }
    ],
    "outputs": null
  },
  {
    "name": "basicTypesAdvance",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": [
      {
        "name": "bool",
        "type": "bool",
        "internalType": "bool",
        "components": null
      },
      {
        "name": "int",
        "type": "int256",
        "internalType": "int256",
        "components": null
      },
      {
        "name": "int8",
        "type": "int8",
        "internalType": "int8",
        "components": null
      },
      {
        "name": "int256",
        "type": "int256",
        "internalType": "int256",
        "components": null
      },
      {
        "name": "uint",
        "type": "uint256",
        "internalType": "uint256",
        "components": null
      },
      {
        "name": "uint8",
        "type": "uint8",
        "internalType": "uint8",
        "components": null
      },
      {
        "name": "uint256",
        "type": "uint256",
        "internalType": "uint256",
        "components": null
      },
      {
        "name": "address",
        "type": "address",
        "internalType": "address",
        "components": null
      },
      {
        "name": "string",
        "type": "string",
        "internalType": "string",
        "components": null
      },
      {
        "name": "bytes",
        "type": "bytes",
        "internalType": "bytes",
        "components": null
      }
    ],
    "outputs": null
  },
  {
    "name": "structAdvance",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": [
      {
        "name": "value",
        "type": "tuple",
        "internalType": "struct nestedStruct",
        "components": [
          {
            "name": "value",
            "type": "tuple",
            "internalType": "struct simpleStruct",
            "components": [
              {
                "name": "value",
                "type": "int64",
                "internalType": "int64",
                "components": null
              }
            ]
          }
        ]
      }
    ],
    "outputs": null
  },
  {
    "name": "ArrayAdvance",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": [
      {
        "name": "value",
        "type": "tuple[]",
        "internalType": "struct simpleStruct[]",
        "components": [
          {
            "name": "value",
            "type": "int64",
            "internalType": "int64",
            "components": null
          }
        ]
      }
    ],
    "outputs": null
  },
  {
    "name": "inspectMessage",
    "type": "function",
    "stateMutability": "nonpayable",
    "inputs": null,
    "outputs": null
  }
]
`

// Solidity ABI.
var _abi abi.ABI

//
// Struct Types
//

// Struct wit a single field
type SimpleStruct struct {
	Value int64
}

// Struct with another struct
type NestedStruct struct {
	Value SimpleStruct
}

// Empty report message
type ReportMessage struct {
}

// Empty advance message
// With multi-line string documentation
type EmptyAdvance struct {
}

// Advance with a single field
type SimpleAdvance struct {
	// Integer value of 64 bits
	Value int64
}

// Advance with multiple fields
type MultiFieldAdvance struct {
	IntValue    int64
	BoolValue   bool
	StringValue string
}

// Advance with basic types
type BasicTypesAdvance struct {
	Bool    bool
	Int     *big.Int
	Int8    int8
	Int256  *big.Int
	Uint    *big.Int
	Uint8   uint8
	Uint256 *big.Int
	Address common.Address
	String  string
	Bytes   []byte
}

// Advance with struct value
type StructAdvance struct {
	Value NestedStruct
}

// Advance with array value
type ArrayAdvance struct {
	Value []SimpleStruct
}

// Empty inspect message
type InspectMessage struct {
}

//
// ID for each schema
//

// 4-byte function selector of reportMessage
var ReportMessageID eggtypes.ID

// 4-byte function selector of emptyAdvance
var EmptyAdvanceID eggtypes.ID

// 4-byte function selector of simpleAdvance
var SimpleAdvanceID eggtypes.ID

// 4-byte function selector of multiFieldAdvance
var MultiFieldAdvanceID eggtypes.ID

// 4-byte function selector of basicTypesAdvance
var BasicTypesAdvanceID eggtypes.ID

// 4-byte function selector of structAdvance
var StructAdvanceID eggtypes.ID

// 4-byte function selector of ArrayAdvance
var ArrayAdvanceID eggtypes.ID

// 4-byte function selector of inspectMessage
var InspectMessageID eggtypes.ID

//
// Encode functions for each message schema
//

// Encode reportMessage into binary data.
func EncodeReportMessage() []byte {
	values := make([]any, 0)
	data, err := _abi.Methods["reportMessage"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode reportMessage: %v", err))
	}
	return append(ReportMessageID[:], data...)
}

// Encode reportMessage into binary data.
func (v ReportMessage) Encode() []byte {
	return EncodeReportMessage()
}

// Encode emptyAdvance into binary data.
func EncodeEmptyAdvance() []byte {
	values := make([]any, 0)
	data, err := _abi.Methods["emptyAdvance"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode emptyAdvance: %v", err))
	}
	return append(EmptyAdvanceID[:], data...)
}

// Encode emptyAdvance into binary data.
func (v EmptyAdvance) Encode() []byte {
	return EncodeEmptyAdvance()
}

// Encode simpleAdvance into binary data.
func EncodeSimpleAdvance(
	Value int64,
) []byte {
	values := make([]any, 1)
	values[0] = Value
	data, err := _abi.Methods["simpleAdvance"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode simpleAdvance: %v", err))
	}
	return append(SimpleAdvanceID[:], data...)
}

// Encode simpleAdvance into binary data.
func (v SimpleAdvance) Encode() []byte {
	return EncodeSimpleAdvance(
		v.Value,
	)
}

// Encode multiFieldAdvance into binary data.
func EncodeMultiFieldAdvance(
	IntValue int64,
	BoolValue bool,
	StringValue string,
) []byte {
	values := make([]any, 3)
	values[0] = IntValue
	values[1] = BoolValue
	values[2] = StringValue
	data, err := _abi.Methods["multiFieldAdvance"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode multiFieldAdvance: %v", err))
	}
	return append(MultiFieldAdvanceID[:], data...)
}

// Encode multiFieldAdvance into binary data.
func (v MultiFieldAdvance) Encode() []byte {
	return EncodeMultiFieldAdvance(
		v.IntValue,
		v.BoolValue,
		v.StringValue,
	)
}

// Encode basicTypesAdvance into binary data.
func EncodeBasicTypesAdvance(
	Bool bool,
	Int *big.Int,
	Int8 int8,
	Int256 *big.Int,
	Uint *big.Int,
	Uint8 uint8,
	Uint256 *big.Int,
	Address common.Address,
	String string,
	Bytes []byte,
) []byte {
	values := make([]any, 10)
	values[0] = Bool
	values[1] = Int
	values[2] = Int8
	values[3] = Int256
	values[4] = Uint
	values[5] = Uint8
	values[6] = Uint256
	values[7] = Address
	values[8] = String
	values[9] = Bytes
	data, err := _abi.Methods["basicTypesAdvance"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode basicTypesAdvance: %v", err))
	}
	return append(BasicTypesAdvanceID[:], data...)
}

// Encode basicTypesAdvance into binary data.
func (v BasicTypesAdvance) Encode() []byte {
	return EncodeBasicTypesAdvance(
		v.Bool,
		v.Int,
		v.Int8,
		v.Int256,
		v.Uint,
		v.Uint8,
		v.Uint256,
		v.Address,
		v.String,
		v.Bytes,
	)
}

// Encode structAdvance into binary data.
func EncodeStructAdvance(
	Value NestedStruct,
) []byte {
	values := make([]any, 1)
	values[0] = Value
	data, err := _abi.Methods["structAdvance"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode structAdvance: %v", err))
	}
	return append(StructAdvanceID[:], data...)
}

// Encode structAdvance into binary data.
func (v StructAdvance) Encode() []byte {
	return EncodeStructAdvance(
		v.Value,
	)
}

// Encode ArrayAdvance into binary data.
func EncodeArrayAdvance(
	Value []SimpleStruct,
) []byte {
	values := make([]any, 1)
	values[0] = Value
	data, err := _abi.Methods["ArrayAdvance"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode ArrayAdvance: %v", err))
	}
	return append(ArrayAdvanceID[:], data...)
}

// Encode ArrayAdvance into binary data.
func (v ArrayAdvance) Encode() []byte {
	return EncodeArrayAdvance(
		v.Value,
	)
}

// Encode inspectMessage into binary data.
func EncodeInspectMessage() []byte {
	values := make([]any, 0)
	data, err := _abi.Methods["inspectMessage"].Inputs.PackValues(values)
	if err != nil {
		panic(fmt.Sprintf("failed to encode inspectMessage: %v", err))
	}
	return append(InspectMessageID[:], data...)
}

// Encode inspectMessage into binary data.
func (v InspectMessage) Encode() []byte {
	return EncodeInspectMessage()
}

//
// Decode functions for each message schema
//

func _decode_ReportMessage(values []any) (any, error) {
	if len(values) != 0 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var v ReportMessage
	return v, nil
}

func _decode_EmptyAdvance(values []any) (any, error) {
	if len(values) != 0 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var v EmptyAdvance
	return v, nil
}

func _decode_SimpleAdvance(values []any) (any, error) {
	if len(values) != 1 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var ok bool
	var v SimpleAdvance
	v.Value, ok = values[0].(int64)
	if !ok {
		return nil, fmt.Errorf("failed to decode simpleAdvance.value")
	}
	return v, nil
}

func _decode_MultiFieldAdvance(values []any) (any, error) {
	if len(values) != 3 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var ok bool
	var v MultiFieldAdvance
	v.IntValue, ok = values[0].(int64)
	if !ok {
		return nil, fmt.Errorf("failed to decode multiFieldAdvance.intValue")
	}
	v.BoolValue, ok = values[1].(bool)
	if !ok {
		return nil, fmt.Errorf("failed to decode multiFieldAdvance.boolValue")
	}
	v.StringValue, ok = values[2].(string)
	if !ok {
		return nil, fmt.Errorf("failed to decode multiFieldAdvance.stringValue")
	}
	return v, nil
}

func _decode_BasicTypesAdvance(values []any) (any, error) {
	if len(values) != 10 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var ok bool
	var v BasicTypesAdvance
	v.Bool, ok = values[0].(bool)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.bool")
	}
	v.Int, ok = values[1].(*big.Int)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.int")
	}
	v.Int8, ok = values[2].(int8)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.int8")
	}
	v.Int256, ok = values[3].(*big.Int)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.int256")
	}
	v.Uint, ok = values[4].(*big.Int)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.uint")
	}
	v.Uint8, ok = values[5].(uint8)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.uint8")
	}
	v.Uint256, ok = values[6].(*big.Int)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.uint256")
	}
	v.Address, ok = values[7].(common.Address)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.address")
	}
	v.String, ok = values[8].(string)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.string")
	}
	v.Bytes, ok = values[9].([]byte)
	if !ok {
		return nil, fmt.Errorf("failed to decode basicTypesAdvance.bytes")
	}
	return v, nil
}

func _decode_StructAdvance(values []any) (any, error) {
	if len(values) != 1 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var ok bool
	var v StructAdvance
	v.Value, ok = values[0].(NestedStruct)
	if !ok {
		return nil, fmt.Errorf("failed to decode structAdvance.value")
	}
	return v, nil
}

func _decode_ArrayAdvance(values []any) (any, error) {
	if len(values) != 1 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var ok bool
	var v ArrayAdvance
	v.Value, ok = values[0].([]SimpleStruct)
	if !ok {
		return nil, fmt.Errorf("failed to decode ArrayAdvance.value")
	}
	return v, nil
}

func _decode_InspectMessage(values []any) (any, error) {
	if len(values) != 0 {
		return nil, fmt.Errorf("wrong number of values")
	}
	var v InspectMessage
	return v, nil
}

//
// Init function
//

func init() {
	var err error
	_abi, err = abi.JSON(strings.NewReader(_JSON_ABI))
	if err != nil {
		// This should not happen
		panic(fmt.Sprintf("failed to decode ABI: %v", err))
	}
	ReportMessageID = eggtypes.ID(_abi.Methods["reportMessage"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        ReportMessageID,
		Kind:      "reportMessage",
		Arguments: _abi.Methods["reportMessage"].Inputs,
		Decoder:   _decode_ReportMessage,
	})
	EmptyAdvanceID = eggtypes.ID(_abi.Methods["emptyAdvance"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        EmptyAdvanceID,
		Kind:      "emptyAdvance",
		Arguments: _abi.Methods["emptyAdvance"].Inputs,
		Decoder:   _decode_EmptyAdvance,
	})
	SimpleAdvanceID = eggtypes.ID(_abi.Methods["simpleAdvance"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        SimpleAdvanceID,
		Kind:      "simpleAdvance",
		Arguments: _abi.Methods["simpleAdvance"].Inputs,
		Decoder:   _decode_SimpleAdvance,
	})
	MultiFieldAdvanceID = eggtypes.ID(_abi.Methods["multiFieldAdvance"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        MultiFieldAdvanceID,
		Kind:      "multiFieldAdvance",
		Arguments: _abi.Methods["multiFieldAdvance"].Inputs,
		Decoder:   _decode_MultiFieldAdvance,
	})
	BasicTypesAdvanceID = eggtypes.ID(_abi.Methods["basicTypesAdvance"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        BasicTypesAdvanceID,
		Kind:      "basicTypesAdvance",
		Arguments: _abi.Methods["basicTypesAdvance"].Inputs,
		Decoder:   _decode_BasicTypesAdvance,
	})
	StructAdvanceID = eggtypes.ID(_abi.Methods["structAdvance"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        StructAdvanceID,
		Kind:      "structAdvance",
		Arguments: _abi.Methods["structAdvance"].Inputs,
		Decoder:   _decode_StructAdvance,
	})
	ArrayAdvanceID = eggtypes.ID(_abi.Methods["ArrayAdvance"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        ArrayAdvanceID,
		Kind:      "ArrayAdvance",
		Arguments: _abi.Methods["ArrayAdvance"].Inputs,
		Decoder:   _decode_ArrayAdvance,
	})
	InspectMessageID = eggtypes.ID(_abi.Methods["inspectMessage"].ID)
	eggtypes.MustAddSchema(eggtypes.MessageSchema{
		ID:        InspectMessageID,
		Kind:      "inspectMessage",
		Arguments: _abi.Methods["inspectMessage"].Inputs,
		Decoder:   _decode_InspectMessage,
	})
}

//
// Middleware
//

// High-level contract
type iContract interface {

	// Empty advance message
	// With multi-line string documentation
	EmptyAdvance(
		eggroll.Env,
	) error

	// Advance with a single field
	SimpleAdvance(
		eggroll.Env,
		int64,
	) error

	// Advance with multiple fields
	MultiFieldAdvance(
		eggroll.Env,
		int64,
		bool,
		string,
	) error

	// Advance with basic types
	BasicTypesAdvance(
		eggroll.Env,
		bool,
		*big.Int,
		int8,
		*big.Int,
		*big.Int,
		uint8,
		*big.Int,
		common.Address,
		string,
		[]byte,
	) error

	// Advance with struct value
	StructAdvance(
		eggroll.Env,
		NestedStruct,
	) error

	// Advance with array value
	ArrayAdvance(
		eggroll.Env,
		[]SimpleStruct,
	) error

	// Empty inspect message
	InspectMessage(
		eggroll.EnvReader,
	) error
}

// Middleware that implements the EggRoll Middleware interface.
// The middleware requires a high-level contract to work.
type Middleware struct {
	contract iContract
}

func (m Middleware) Advance(env eggroll.Env, input []byte) error {
	unpacked, err := eggtypes.Decode(input)
	if err != nil {
		return err
	}
	switch input := unpacked.(type) {
	case EmptyAdvance:
		return m.contract.EmptyAdvance(
			env,
		)
	case SimpleAdvance:
		return m.contract.SimpleAdvance(
			env,
			input.Value,
		)
	case MultiFieldAdvance:
		return m.contract.MultiFieldAdvance(
			env,
			input.IntValue,
			input.BoolValue,
			input.StringValue,
		)
	case BasicTypesAdvance:
		return m.contract.BasicTypesAdvance(
			env,
			input.Bool,
			input.Int,
			input.Int8,
			input.Int256,
			input.Uint,
			input.Uint8,
			input.Uint256,
			input.Address,
			input.String,
			input.Bytes,
		)
	case StructAdvance:
		return m.contract.StructAdvance(
			env,
			input.Value,
		)
	case ArrayAdvance:
		return m.contract.ArrayAdvance(
			env,
			input.Value,
		)
	default:
		return fmt.Errorf("unknown input: %T", input)
	}
}

func (m Middleware) Inspect(env eggroll.EnvReader, input []byte) error {
	unpacked, err := eggtypes.Decode(input)
	if err != nil {
		return err
	}
	switch input := unpacked.(type) {
	case InspectMessage:
		return m.contract.InspectMessage(
			env,
		)
	default:
		return fmt.Errorf("unknown input: %T", input)
	}
}

func Roll(contract iContract) {
	eggroll.Roll(Middleware{contract})
}
