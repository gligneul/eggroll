// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package reader

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type CompletionStatus string

const (
	CompletionStatusUnprocessed                CompletionStatus = "UNPROCESSED"
	CompletionStatusAccepted                   CompletionStatus = "ACCEPTED"
	CompletionStatusRejected                   CompletionStatus = "REJECTED"
	CompletionStatusException                  CompletionStatus = "EXCEPTION"
	CompletionStatusMachineHalted              CompletionStatus = "MACHINE_HALTED"
	CompletionStatusCycleLimitExceeded         CompletionStatus = "CYCLE_LIMIT_EXCEEDED"
	CompletionStatusTimeLimitExceeded          CompletionStatus = "TIME_LIMIT_EXCEEDED"
	CompletionStatusPayloadLengthLimitExceeded CompletionStatus = "PAYLOAD_LENGTH_LIMIT_EXCEEDED"
)

// __getInputInput is used internally by genqlient
type __getInputInput struct {
	InputIndex int `json:"inputIndex"`
}

// GetInputIndex returns __getInputInput.InputIndex, and is useful for accessing the field via an interface.
func (v *__getInputInput) GetInputIndex() int { return v.InputIndex }

// getInputInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputInput struct {
	// Status of the input
	Status CompletionStatus `json:"status"`
	// Input payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Address responsible for submitting the input
	MsgSender string `json:"msgSender"`
	// Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded
	Timestamp string `json:"timestamp"`
	// Number of the base layer block in which the input was recorded
	BlockNumber string `json:"blockNumber"`
	// Get vouchers from this particular input with support for pagination
	Vouchers getInputInputVouchersVoucherConnection `json:"vouchers"`
	// Get notices from this particular input with support for pagination
	Notices getInputInputNoticesNoticeConnection `json:"notices"`
	// Get reports from this particular input with support for pagination
	Reports getInputInputReportsReportConnection `json:"reports"`
}

// GetStatus returns getInputInput.Status, and is useful for accessing the field via an interface.
func (v *getInputInput) GetStatus() CompletionStatus { return v.Status }

// GetPayload returns getInputInput.Payload, and is useful for accessing the field via an interface.
func (v *getInputInput) GetPayload() string { return v.Payload }

// GetMsgSender returns getInputInput.MsgSender, and is useful for accessing the field via an interface.
func (v *getInputInput) GetMsgSender() string { return v.MsgSender }

// GetTimestamp returns getInputInput.Timestamp, and is useful for accessing the field via an interface.
func (v *getInputInput) GetTimestamp() string { return v.Timestamp }

// GetBlockNumber returns getInputInput.BlockNumber, and is useful for accessing the field via an interface.
func (v *getInputInput) GetBlockNumber() string { return v.BlockNumber }

// GetVouchers returns getInputInput.Vouchers, and is useful for accessing the field via an interface.
func (v *getInputInput) GetVouchers() getInputInputVouchersVoucherConnection { return v.Vouchers }

// GetNotices returns getInputInput.Notices, and is useful for accessing the field via an interface.
func (v *getInputInput) GetNotices() getInputInputNoticesNoticeConnection { return v.Notices }

// GetReports returns getInputInput.Reports, and is useful for accessing the field via an interface.
func (v *getInputInput) GetReports() getInputInputReportsReportConnection { return v.Reports }

// getInputInputNoticesNoticeConnection includes the requested fields of the GraphQL type NoticeConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputInputNoticesNoticeConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputInputNoticesNoticeConnectionEdgesNoticeEdge `json:"edges"`
}

// GetEdges returns getInputInputNoticesNoticeConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnection) GetEdges() []getInputInputNoticesNoticeConnectionEdgesNoticeEdge {
	return v.Edges
}

// getInputInputNoticesNoticeConnectionEdgesNoticeEdge includes the requested fields of the GraphQL type NoticeEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputInputNoticesNoticeConnectionEdgesNoticeEdge struct {
	// Node instance
	Node getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice `json:"node"`
}

// GetNode returns getInputInputNoticesNoticeConnectionEdgesNoticeEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdge) GetNode() getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice {
	return v.Node
}

// getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice includes the requested fields of the GraphQL type Notice.
// The GraphQL type's documentation follows.
//
// Informational statement that can be validated in the base layer blockchain
type getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice struct {
	// Notice index within the context of the input that produced it
	Index int `json:"index"`
	// Notice data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Index, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Payload, and is useful for accessing the field via an interface.
func (v *getInputInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetPayload() string {
	return v.Payload
}

// getInputInputReportsReportConnection includes the requested fields of the GraphQL type ReportConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputInputReportsReportConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputInputReportsReportConnectionEdgesReportEdge `json:"edges"`
}

// GetEdges returns getInputInputReportsReportConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnection) GetEdges() []getInputInputReportsReportConnectionEdgesReportEdge {
	return v.Edges
}

// getInputInputReportsReportConnectionEdgesReportEdge includes the requested fields of the GraphQL type ReportEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputInputReportsReportConnectionEdgesReportEdge struct {
	// Node instance
	Node getInputInputReportsReportConnectionEdgesReportEdgeNodeReport `json:"node"`
}

// GetNode returns getInputInputReportsReportConnectionEdgesReportEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnectionEdgesReportEdge) GetNode() getInputInputReportsReportConnectionEdgesReportEdgeNodeReport {
	return v.Node
}

// getInputInputReportsReportConnectionEdgesReportEdgeNodeReport includes the requested fields of the GraphQL type Report.
// The GraphQL type's documentation follows.
//
// Application log or diagnostic information
type getInputInputReportsReportConnectionEdgesReportEdgeNodeReport struct {
	// Report index within the context of the input that produced it
	Index int `json:"index"`
	// Report data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputInputReportsReportConnectionEdgesReportEdgeNodeReport.Index, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnectionEdgesReportEdgeNodeReport) GetIndex() int {
	return v.Index
}

// GetPayload returns getInputInputReportsReportConnectionEdgesReportEdgeNodeReport.Payload, and is useful for accessing the field via an interface.
func (v *getInputInputReportsReportConnectionEdgesReportEdgeNodeReport) GetPayload() string {
	return v.Payload
}

// getInputInputVouchersVoucherConnection includes the requested fields of the GraphQL type VoucherConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getInputInputVouchersVoucherConnection struct {
	// Pagination entries returned for the current page
	Edges []getInputInputVouchersVoucherConnectionEdgesVoucherEdge `json:"edges"`
}

// GetEdges returns getInputInputVouchersVoucherConnection.Edges, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnection) GetEdges() []getInputInputVouchersVoucherConnectionEdgesVoucherEdge {
	return v.Edges
}

// getInputInputVouchersVoucherConnectionEdgesVoucherEdge includes the requested fields of the GraphQL type VoucherEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getInputInputVouchersVoucherConnectionEdgesVoucherEdge struct {
	// Node instance
	Node getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher `json:"node"`
}

// GetNode returns getInputInputVouchersVoucherConnectionEdgesVoucherEdge.Node, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdge) GetNode() getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher {
	return v.Node
}

// getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher includes the requested fields of the GraphQL type Voucher.
// The GraphQL type's documentation follows.
//
// Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
type getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher struct {
	// Voucher index within the context of the input that produced it
	Index int `json:"index"`
	// Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
	Destination string `json:"destination"`
	// Transaction payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Index, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetIndex() int {
	return v.Index
}

// GetDestination returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Destination, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetDestination() string {
	return v.Destination
}

// GetPayload returns getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Payload, and is useful for accessing the field via an interface.
func (v *getInputInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetPayload() string {
	return v.Payload
}

// getInputResponse is returned by getInput on success.
type getInputResponse struct {
	// Get input based on its identifier
	Input getInputInput `json:"input"`
}

// GetInput returns getInputResponse.Input, and is useful for accessing the field via an interface.
func (v *getInputResponse) GetInput() getInputInput { return v.Input }

// The query or mutation executed by getInput.
const getInput_Operation = `
query getInput ($inputIndex: Int!) {
	input(index: $inputIndex) {
		status
		payload
		msgSender
		timestamp
		blockNumber
		vouchers {
			edges {
				node {
					index
					destination
					payload
				}
			}
		}
		notices {
			edges {
				node {
					index
					payload
				}
			}
		}
		reports {
			edges {
				node {
					index
					payload
				}
			}
		}
	}
}
`

func getInput(
	ctx context.Context,
	client graphql.Client,
	inputIndex int,
) (*getInputResponse, error) {
	req := &graphql.Request{
		OpName: "getInput",
		Query:  getInput_Operation,
		Variables: &__getInputInput{
			InputIndex: inputIndex,
		},
	}
	var err error

	var data getInputResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
